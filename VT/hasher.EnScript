/*
 * Author: Jamie Levy (Gleeda)
 *
 * hasher.EnScript
 *
 * Driver for virustotal.pl
 *
 * hashes selected files for case and calls virustotal.pl to
 *  create an HTML report of these files
 *
 */

class MainClass {
  String hashfile, output;

  void Main(CaseClass c) {
    int                 notWorks,
                        TotalFiles;
    String ActivePerl = "C:\\Perl\\bin";
    String script =     "C:\\Program Files\\EnCase6.18\\EnScript\\VT\\virustotal.pl";
    String cmdline =    "/c cd \"" + ActivePerl + "\" && perl ";


    if (!SystemClass::PathDialog(hashfile,
                                  "Choose Hash output file",
                                  "txt",
                                  "Text Files\t*.txt",
                                  SystemClass::CREATE)){
       Console.WriteLine("Create Failed for: " + hashfile);
       return;
    }

     if (!SystemClass::FolderDialog(output, "VirusTotal Report :: Choose an Output Folder")){
       Console.WriteLine("Create Failed for: " + output);
       return;
    }

    SystemClass::ClearConsole(SystemClass::SHOWCONSOLE);
    Console.WriteLine("HASHFILE: " + hashfile);
    cmdline += "\"" + script + "\" -t -d \"" + output + "\" -f " + "\"" + hashfile + "\"";

    SearchClass search();
    LocalFileClass   file();
    file.Open(hashfile, FileClass::WRITETEXTCRLF);
    file.SetCodePage(CodePageClass::UTF8);

    ExecuteClass exec();
    exec.SetApplication("cmd.exe");
    exec.SetFolder("C:\\WINDOWS\\system32\\");

    forall (EntryClass e in c.EntryRoot()) {
      if (e.IsSelected()) {
        ++TotalFiles;
      }
    }

    SystemClass::StatusRange("Hashing files", TotalFiles);

    forall (EntryClass e in c.EntryRoot()) {
      if (e.IsSelected()){
        HashClass hash = search.ComputeHash(e);
        if (!hash.IsValid()) {
          notWorks++;
          Console.WriteLine("Rejected file: " + e.FullPath());
        }else{
          Console.WriteLine("Entry " + e.FullPath());
          Console.WriteLine("Hash Value: " + hash);
          file.WriteLine(e.FullPath() + "\t" + hash);
          SystemClass::StatusInc();
        }
      }
    }

    Console.WriteLine("Finished Hashing");
    file.Close();

    if (notWorks == 0) {
      Console.WriteLine("Successfully obtained hashes");
      Console.WriteLine(cmdline);
      Console.WriteLine(exec.Folder());
      Console.WriteLine(exec.Application());

      exec.SetCommandLine(cmdline);
      exec.SetShow(true);  //left this visible so we'll know when it finishes
      //exec.SetShow(false);  //set this to false if you don't want to see the commandline
      if (exec.Start(LocalMachine, 1000)) {
        Console.WriteLine(exec.Output());
        Console.WriteLine("Worked");
      }
      else
        Console.WriteLine("Could Not Start Application");
    }
    else
      Console.WriteLine("Did not obtain hashes");
  }
}
