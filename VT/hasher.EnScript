/*
 * Author: Jamie Levy (Gleeda)
 * 
 * hasher.EnScript
 *
 * Driver for virustotal.pl
 *
 * hashes all files for case and calls virustotal.pl to 
 *  create an HTML report of these files
 *
 */

class MainClass {

  void Main(CaseClass c) {
    int                 notWorks,
                        TotalFiles;
    String hashfile =   "C:\\temp\\hashes.txt";
    String ActivePerl = "C:\\Perl\\bin";
    String output =     "C:\\temp\\output";
    String script =     "C:\\temp\\virustotal.pl";
    String cmdline =    "/c cd \"" + ActivePerl + "\" && perl ";
    cmdline += "\"" + script + "\" -t -d \"" + output + "\" -f " + "\"" + hashfile + "\"";

    SearchClass search();
    SystemClass::ClearConsole(SystemClass::SHOWCONSOLE);
    LocalFileClass   file();
    file.Open(hashfile, FileClass::WRITETEXTCRLF);
    file.SetCodePage(CodePageClass::UTF8);

    ExecuteClass exec();
    exec.SetApplication("cmd.exe");
    exec.SetFolder("C:\\WINDOWS\\system32\\");

    forall (EntryClass e in c.EntryRoot()) {
      if (!e.IsFolder() && !e.IsDeleted() && !e.FullPath().Contains("Volume Slack") &&
        !e.FullPath().Contains("Unallocated Clusters") && !e.FullPath().Contains("Unused Disk Area")) {
        ++TotalFiles;
      }
    }

    SystemClass::StatusRange("Hashing files", TotalFiles);

    forall (EntryClass e in c.EntryRoot()) {
      if (!e.IsFolder() && !e.IsDeleted() && !e.FullPath().Contains("Volume Slack") &&
          !e.FullPath().Contains("Unallocated Clusters") && !e.FullPath().Contains("Unused Disk Area")) {
        HashClass hash = search.ComputeHash(e);
        if (!hash.IsValid())
          notWorks++;
        Console.WriteLine("Entry " + e.FullPath());
        Console.WriteLine("Hash Value: " + hash);
        file.WriteLine(hash + "\t" + e.FullPath());
        SystemClass::StatusInc();
      }
      else
        Console.WriteLine("Rejected file: " + e.FullPath());
    }

    Console.WriteLine("Finished Hashing");
    file.Close();

    if (notWorks == 0) {
      Console.WriteLine("Successfully obtained hashes");
      Console.WriteLine(cmdline);
      Console.WriteLine(exec.Folder());
      Console.WriteLine(exec.Application());

      exec.SetCommandLine(cmdline);
      exec.SetShow(true);
      if (exec.Start(LocalMachine, 1000)) {
        Console.WriteLine(exec.Output());
        Console.WriteLine("Worked");
      }
      else
        Console.WriteLine("Could Not Start Application");
    }
    else
      Console.WriteLine("Did not obtain hashes");
  }
}
