--- binutils-2.20.51/binutils/strings.c	2009-11-10 23:54:32.000000000 -0500
+++ strings.c	2014-07-21 15:27:42.000000000 -0400
@@ -60,6 +60,10 @@
    Written by Richard Stallman <rms@gnu.ai.mit.edu>
    and David MacKenzie <djm@gnu.ai.mit.edu>.  */
 
+/* Changes made to get Unicode and ASCII strings in one run: 11/05/11
+   Jamie Levy <jamie.levy@gmail.com>
+*/
+
 #include "sysdep.h"
 #include "bfd.h"
 #include "getopt.h"
@@ -68,10 +72,15 @@
 #include <sys/stat.h>
 #include "bucomm.h"
 
+/* 
+ * it may not be a good idea to avoid some of these ranges in UTF-8, but it seems to keep out a lot of junk
+ * and also seems they are really invalid from the description of UTF-8
+ */
 #define STRING_ISGRAPHIC(c) \
       (   (c) >= 0 \
        && (c) <= 255 \
-       && ((c) == '\t' || ISPRINT (c) || (encoding == 'S' && (c) > 127)))
+       && ((c) == '\t' || ISPRINT (c) || (encoding == 'S' && (c) > 127 && (c) < 245 && (c) != 192 && (c) != 193)))
+
 
 #ifndef errno
 extern int errno;
@@ -102,8 +111,9 @@
 static char *target;
 
 /* The character encoding format.  */
-static char encoding;
+char encoding;
 static int encoding_bytes;
+char endian;   //added this in case we ever really need to differentiate between endianness 
 
 static struct option long_options[] =
 {
@@ -161,7 +171,8 @@
   print_filenames = FALSE;
   datasection_only = TRUE;
   target = NULL;
-  encoding = 's';
+  encoding = 's';  //this doesn't matter, since we switch encodings....
+  endian = 'l';    //by default we like little-endian
 
   while ((optc = getopt_long (argc, argv, "afhHn:ot:e:T:Vv0123456789",
 			      long_options, (int *) 0)) != EOF)
@@ -221,7 +232,8 @@
 	case 'e':
 	  if (optarg[1] != '\0')
 	    usage (stderr, 1);
-	  encoding = optarg[0];
+	  //encoding = optarg[0];
+      endian = optarg[0];
 	  break;
 
 	case 'V':
@@ -534,31 +546,71 @@
 {
   char *buf = (char *) xmalloc (sizeof (char) * (string_min + 1));
 
+  char encodings[] = {/*'L',*/ 'l', 's'}; // , 'S'};  //we actually don't need both 's' and 'S'
+  int ebytes[] = {/*4,*/ 2, 1 }; //, 1};
+
+  if (endian == 'b') {
+    //encodings[0] = 'B';
+    //encodings[1] = 'b';
+    encodings[0] = 'b';
+  }
+
+  fpos_t fpos; 
+  int size;
+  size = sizeof(encodings);
+
   while (1)
     {
       file_ptr start;
-      int i;
+      int i,n;
       long c;
+      c = 0;
 
       /* See if the next `string_min' chars are all graphic chars.  */
     tryline:
-      if (stop_point && address >= stop_point)
-	break;
-      start = address;
+      if (stop_point && address >= stop_point){
+	    break;
+      }
+      start = ftell(stream);  //not sure we really need ftell, should just be able to use address...
+      fgetpos(stream, &fpos);
+      for (n = 0; n < size; n++){ 
+        encoding = encodings[n];
+        encoding_bytes = ebytes[n];
       for (i = 0; i < string_min; i++)
 	{
 	  c = get_char (stream, &address, &magiccount, &magic);
-	  if (c == EOF)
+	  if (c == EOF) 
 	    return;
-	  if (! STRING_ISGRAPHIC (c))
-	    /* Found a non-graphic.  Try again starting with next char.  */
-	    goto tryline;
-	  buf[i] = c;
+
+	  if (! STRING_ISGRAPHIC (c) && n < size-1) {
+	    /* Found a non-graphic.  Try again starting with next encoding.  */
+        fsetpos(stream, &fpos);
+        address = start;
+        i = string_min;
+      } 
+      else if (! STRING_ISGRAPHIC (c) ) {
+        /* counldn't find a graphic, move to next byte char */
+        i = string_min;
+      }
+      else
+        buf[i] = c; 
+        
+     }
+      if (STRING_ISGRAPHIC (c))
+        /* we found a string of chars, break out */
+        goto outside1;
 	}
+    if (! STRING_ISGRAPHIC (c)) {
+        fsetpos(stream, &fpos);  //may not need to reset back one byte, but i'm cautious
+        address = start;
+        c = get_char (stream, &address, &magiccount, &magic);
+        goto tryline;
+    }
 
       /* We found a run of `string_min' graphic characters.  Print up
 	 to the next non-graphic character.  */
 
+    outside1:
       if (print_filenames)
 	printf ("%s: ", filename);
       if (print_addresses)
@@ -626,20 +678,23 @@
       buf[i] = '\0';
       fputs (buf, stdout);
 
+    /* may want to rewind by one char at the end of this...haven't yet decided */
       while (1)
 	{
 	  c = get_char (stream, &address, &magiccount, &magic);
-	  if (c == EOF)
+	  if (c == EOF) {
 	    break;
-	  if (! STRING_ISGRAPHIC (c))
+      }
+	  if (! STRING_ISGRAPHIC (c)) {
 	    break;
+      }
 	  putchar (c);
 	}
 
       putchar ('\n');
     }
 }
-
+
 static void
 usage (FILE *stream, int status)
 {
@@ -653,8 +708,9 @@
   -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\n\
   -o                        An alias for --radix=o\n\
   -T --target=<BFDNAME>     Specify the binary file format\n\
-  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\n\
-                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\n\
+  -e --encoding={b,l}       Select endianness (all char sizes are done by default):\n\
+                              b = big-endian, l = little-endian the following are defunct:\n\
+                              s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\n\
   @<file>                   Read options from <file>\n\
   -h --help                 Display this information\n\
   -v -V --version           Print the program's version number\n"));
